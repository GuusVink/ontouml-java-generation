/*******************************************************************************
 * File generated from the ontology::aguiar2018rdbso::model::ontology::dbso::Dictionary uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:22:43 CEST
 *******************************************************************************/
package aguiar2018rdbso.model.ontology.dbso;

import aguiar2018rdbso.model.ontology.rdbso.Language;
import aguiar2018rdbso.model.ontology.spo.Artifact;
import aguiar2018rdbso.model.ontology.spo.SoftwareItem;
import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of Dictionary.
 * 
 * @author 
 */
public class Dictionary implements DBMSItem {
	/**
	 * Description of the property schema.
	 */
	public ArrayList<Schema> schema = new ArrayList<Schema>();
	
	/**
	 * Description of the property dBMSAccount.
	 */
	public ArrayList<DBMSAccount> dBMSAccount = new ArrayList<DBMSAccount>();
	
	// Start of user code (user defined attributes for Dictionary)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public Dictionary() {
		// Start of user code constructor for Dictionary)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for Dictionary)
	
	// End of user code
	/**
	 * Returns databaseSystem.
	 * Originates from implemented interface.
	 * @return databaseSystem 
	 */
	@Override
	public DatabaseSystem getDatabaseSystem() {
		// Start of user code for method getDatabaseSystem
		// TODO implement
		return null;
		// End of user code
	}
	
	/**
	 * Sets a value to attribute databaseSystem. 
	 * Originates from implemented interface.
	 * @param newDatabaseSystem 
	 */
	@Override
	public void setDatabaseSystem(DatabaseSystem newDatabaseSystem) {
		// Start of user code for method setDatabaseSystem
		// TODO implement
		// End of user code
	}
	/**
	 * Returns language.
	 * Originates from implemented interface.
	 * @return language 
	 */
	@Override
	public ArrayList<Language> getLanguage() {
		// Start of user code for method getLanguage
		// TODO implement
		return new ArrayList<Language>();
		// End of user code
	}
	
	/**
	 * Sets a value to attribute language. 
	 * Originates from implemented interface.
	 * @param newLanguage 
	 */
	@Override
	public void setLanguage(ArrayList<Language> newLanguage) {
		// Start of user code for method setLanguage
		// TODO implement
		// End of user code
	}
	/**
	 * Returns loadedDBMSCopy.
	 * Originates from implemented interface.
	 * @return loadedDBMSCopy 
	 */
	@Override
	public ArrayList<LoadedDBMSCopy> getLoadedDBMSCopy() {
		// Start of user code for method getLoadedDBMSCopy
		// TODO implement
		return new ArrayList<LoadedDBMSCopy>();
		// End of user code
	}
	
	/**
	 * Sets a value to attribute loadedDBMSCopy. 
	 * Originates from implemented interface.
	 * @param newLoadedDBMSCopy 
	 */
	@Override
	public void setLoadedDBMSCopy(ArrayList<LoadedDBMSCopy> newLoadedDBMSCopy) {
		// Start of user code for method setLoadedDBMSCopy
		// TODO implement
		// End of user code
	}
	
	
	/**
	 * Returns schema.
	 * @return schema 
	 */
	public ArrayList<Schema> getSchema() {
		return this.schema;
	}
	
	/**
	 * Sets a value to attribute schema. 
	 * @param newSchema 
	 */
	public void setSchema(ArrayList<Schema> newSchema) {
	    this.schema = newSchema;
	}
	
	/**
	 * Adds one attribute (if schema had a multiple cardinality)
	 * @param schemaToAdd in schema
	 */
	public void addSchemaToSchema(Schema schemaToAdd) {
		this.schema.add(schemaToAdd);
	}
	
	/**
	 * Removes an attribute (if schema had a multiple cardinality)
	 * @param schemaToRemove in schema
	 */
	public void removeSchemaToSchema(Schema schemaToRemove) {
		this.schema.remove(schemaToRemove);
	}
	
	/**
	 * Adds all the attribute (if schema had a multiple cardinality)
	 * @param schemasToAdd in schema
	 */
	public void addAllSchemaToSchema(ArrayList<Schema> schemasToAdd) {
		this.schema.addAll(schemasToAdd);
	}
	
	/**
	 * Removes all the attribute (if schema had a multiple cardinality)
	 * @param schemasToRemove in schema
	 */
	public void removeAllSchemaToSchema(ArrayList<Schema> schemasToRemove) {
		this.schema.removeAll(schemasToRemove);
	}

	/**
	 * Returns dBMSAccount.
	 * @return dBMSAccount 
	 */
	public ArrayList<DBMSAccount> getDBMSAccount() {
		return this.dBMSAccount;
	}
	
	/**
	 * Sets a value to attribute dBMSAccount. 
	 * @param newDBMSAccount 
	 */
	public void setDBMSAccount(ArrayList<DBMSAccount> newDBMSAccount) {
	    this.dBMSAccount = newDBMSAccount;
	}
	
	/**
	 * Adds one attribute (if dBMSAccount had a multiple cardinality)
	 * @param dBMSAccountToAdd in dBMSAccount
	 */
	public void addDBMSAccountToDBMSAccount(DBMSAccount dBMSAccountToAdd) {
		this.dBMSAccount.add(dBMSAccountToAdd);
	}
	
	/**
	 * Removes an attribute (if dBMSAccount had a multiple cardinality)
	 * @param dBMSAccountToRemove in dBMSAccount
	 */
	public void removeDBMSAccountToDBMSAccount(DBMSAccount dBMSAccountToRemove) {
		this.dBMSAccount.remove(dBMSAccountToRemove);
	}
	
	/**
	 * Adds all the attribute (if dBMSAccount had a multiple cardinality)
	 * @param dBMSAccountsToAdd in dBMSAccount
	 */
	public void addAllDBMSAccountToDBMSAccount(ArrayList<DBMSAccount> dBMSAccountsToAdd) {
		this.dBMSAccount.addAll(dBMSAccountsToAdd);
	}
	
	/**
	 * Removes all the attribute (if dBMSAccount had a multiple cardinality)
	 * @param dBMSAccountsToRemove in dBMSAccount
	 */
	public void removeAllDBMSAccountToDBMSAccount(ArrayList<DBMSAccount> dBMSAccountsToRemove) {
		this.dBMSAccount.removeAll(dBMSAccountsToRemove);
	}



}
