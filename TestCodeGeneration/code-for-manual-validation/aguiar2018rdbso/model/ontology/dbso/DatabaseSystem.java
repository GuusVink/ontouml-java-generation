/*******************************************************************************
 * File generated from the ontology::aguiar2018rdbso::model::ontology::dbso::DatabaseSystem uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:22:43 CEST
 *******************************************************************************/
package aguiar2018rdbso.model.ontology.dbso;

import aguiar2018rdbso.model.ontology.swo.ComputerSystem;
import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of DatabaseSystem.
 * 
 * @author 
 */
public class DatabaseSystem extends ComputerSystem {
	/**
	 * Description of the property dBMSItem.
	 */
	public ArrayList<DBMSItem> dBMSItem = new ArrayList<DBMSItem>();
	
	/**
	 * Description of the property loadedDBMSCopy.
	 */
	public ArrayList<LoadedDBMSCopy> loadedDBMSCopy = new ArrayList<LoadedDBMSCopy>();
	
	// Start of user code (user defined attributes for DatabaseSystem)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public DatabaseSystem() {
		// Start of user code constructor for DatabaseSystem)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for DatabaseSystem)
	
	// End of user code
	
	
	/**
	 * Returns dBMSItem.
	 * @return dBMSItem 
	 */
	public ArrayList<DBMSItem> getDBMSItem() {
		return this.dBMSItem;
	}
	
	/**
	 * Sets a value to attribute dBMSItem. 
	 * @param newDBMSItem 
	 */
	public void setDBMSItem(ArrayList<DBMSItem> newDBMSItem) {
	    this.dBMSItem = newDBMSItem;
	}
	
	/**
	 * Adds one attribute (if dBMSItem had a multiple cardinality)
	 * @param dBMSItemToAdd in dBMSItem
	 */
	public void addDBMSItemToDBMSItem(DBMSItem dBMSItemToAdd) {
		this.dBMSItem.add(dBMSItemToAdd);
	}
	
	/**
	 * Removes an attribute (if dBMSItem had a multiple cardinality)
	 * @param dBMSItemToRemove in dBMSItem
	 */
	public void removeDBMSItemToDBMSItem(DBMSItem dBMSItemToRemove) {
		this.dBMSItem.remove(dBMSItemToRemove);
	}
	
	/**
	 * Adds all the attribute (if dBMSItem had a multiple cardinality)
	 * @param dBMSItemsToAdd in dBMSItem
	 */
	public void addAllDBMSItemToDBMSItem(ArrayList<DBMSItem> dBMSItemsToAdd) {
		this.dBMSItem.addAll(dBMSItemsToAdd);
	}
	
	/**
	 * Removes all the attribute (if dBMSItem had a multiple cardinality)
	 * @param dBMSItemsToRemove in dBMSItem
	 */
	public void removeAllDBMSItemToDBMSItem(ArrayList<DBMSItem> dBMSItemsToRemove) {
		this.dBMSItem.removeAll(dBMSItemsToRemove);
	}

	/**
	 * Returns loadedDBMSCopy.
	 * @return loadedDBMSCopy 
	 */
	public ArrayList<LoadedDBMSCopy> getLoadedDBMSCopy() {
		return this.loadedDBMSCopy;
	}
	
	/**
	 * Sets a value to attribute loadedDBMSCopy. 
	 * @param newLoadedDBMSCopy 
	 */
	public void setLoadedDBMSCopy(ArrayList<LoadedDBMSCopy> newLoadedDBMSCopy) {
	    this.loadedDBMSCopy = newLoadedDBMSCopy;
	}
	
	/**
	 * Adds one attribute (if loadedDBMSCopy had a multiple cardinality)
	 * @param loadedDBMSCopyToAdd in loadedDBMSCopy
	 */
	public void addLoadedDBMSCopyToLoadedDBMSCopy(LoadedDBMSCopy loadedDBMSCopyToAdd) {
		this.loadedDBMSCopy.add(loadedDBMSCopyToAdd);
	}
	
	/**
	 * Removes an attribute (if loadedDBMSCopy had a multiple cardinality)
	 * @param loadedDBMSCopyToRemove in loadedDBMSCopy
	 */
	public void removeLoadedDBMSCopyToLoadedDBMSCopy(LoadedDBMSCopy loadedDBMSCopyToRemove) {
		this.loadedDBMSCopy.remove(loadedDBMSCopyToRemove);
	}
	
	/**
	 * Adds all the attribute (if loadedDBMSCopy had a multiple cardinality)
	 * @param loadedDBMSCopysToAdd in loadedDBMSCopy
	 */
	public void addAllLoadedDBMSCopyToLoadedDBMSCopy(ArrayList<LoadedDBMSCopy> loadedDBMSCopysToAdd) {
		this.loadedDBMSCopy.addAll(loadedDBMSCopysToAdd);
	}
	
	/**
	 * Removes all the attribute (if loadedDBMSCopy had a multiple cardinality)
	 * @param loadedDBMSCopysToRemove in loadedDBMSCopy
	 */
	public void removeAllLoadedDBMSCopyToLoadedDBMSCopy(ArrayList<LoadedDBMSCopy> loadedDBMSCopysToRemove) {
		this.loadedDBMSCopy.removeAll(loadedDBMSCopysToRemove);
	}



}
