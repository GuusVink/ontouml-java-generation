/*******************************************************************************
 * File generated from the ontology::aguiar2018rdbso::model::ontology::rdbso::DataFile uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:22:43 CEST
 *******************************************************************************/
package aguiar2018rdbso.model.ontology.rdbso;

import aguiar2018rdbso.model.ontology.dbso.Database;
import aguiar2018rdbso.model.ontology.spo.Artifact;
import aguiar2018rdbso.model.ontology.spo.SoftwareItem;
import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of DataFile.
 * 
 * @author 
 */
public class DataFile implements SoftwareItem {
	/**
	 * Description of the property table.
	 */
	public ArrayList<Table> table = new ArrayList<Table>();
	
	/**
	 * Description of the property database.
	 */
	public Database database = null;
	
	// Start of user code (user defined attributes for DataFile)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public DataFile() {
		// Start of user code constructor for DataFile)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for DataFile)
	
	// End of user code
	/**
	 * Returns language.
	 * Originates from implemented interface.
	 * @return language 
	 */
	@Override
	public ArrayList<Language> getLanguage() {
		// Start of user code for method getLanguage
		// TODO implement
		return new ArrayList<Language>();
		// End of user code
	}
	
	/**
	 * Sets a value to attribute language. 
	 * Originates from implemented interface.
	 * @param newLanguage 
	 */
	@Override
	public void setLanguage(ArrayList<Language> newLanguage) {
		// Start of user code for method setLanguage
		// TODO implement
		// End of user code
	}
	
	
	/**
	 * Returns table.
	 * @return table 
	 */
	public ArrayList<Table> getTable() {
		return this.table;
	}
	
	/**
	 * Sets a value to attribute table. 
	 * @param newTable 
	 */
	public void setTable(ArrayList<Table> newTable) {
	    this.table = newTable;
	}
	
	/**
	 * Adds one attribute (if table had a multiple cardinality)
	 * @param tableToAdd in table
	 */
	public void addTableToTable(Table tableToAdd) {
		this.table.add(tableToAdd);
	}
	
	/**
	 * Removes an attribute (if table had a multiple cardinality)
	 * @param tableToRemove in table
	 */
	public void removeTableToTable(Table tableToRemove) {
		this.table.remove(tableToRemove);
	}
	
	/**
	 * Adds all the attribute (if table had a multiple cardinality)
	 * @param tablesToAdd in table
	 */
	public void addAllTableToTable(ArrayList<Table> tablesToAdd) {
		this.table.addAll(tablesToAdd);
	}
	
	/**
	 * Removes all the attribute (if table had a multiple cardinality)
	 * @param tablesToRemove in table
	 */
	public void removeAllTableToTable(ArrayList<Table> tablesToRemove) {
		this.table.removeAll(tablesToRemove);
	}

	/**
	 * Returns database.
	 * @return database 
	 */
	public Database getDatabase() {
		return this.database;
	}
	
	/**
	 * Sets a value to attribute database. 
	 * @param newDatabase 
	 */
	public void setDatabase(Database newDatabase) {
		this.database = newDatabase;
	}



}
