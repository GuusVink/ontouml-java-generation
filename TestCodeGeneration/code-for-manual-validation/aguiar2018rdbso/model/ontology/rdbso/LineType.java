/*******************************************************************************
 * File generated from the ontology::aguiar2018rdbso::model::ontology::rdbso::LineType uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:22:43 CEST
 *******************************************************************************/
package aguiar2018rdbso.model.ontology.rdbso;

import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of LineType.
 * 
 * @author 
 */
public class LineType {
	/**
	 * Description of the property column.
	 */
	public ArrayList<Column> column = new ArrayList<Column>();
	
	/**
	 * Description of the property line.
	 */
	public ArrayList<Line> line = new ArrayList<Line>();
	
	/**
	 * Description of the property table.
	 */
	public Table table = null;
	
	// Start of user code (user defined attributes for LineType)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public LineType() {
		// Start of user code constructor for LineType)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for LineType)
	
	// End of user code
	
	
	/**
	 * Returns column.
	 * @return column 
	 */
	public ArrayList<Column> getColumn() {
		return this.column;
	}
	
	/**
	 * Sets a value to attribute column. 
	 * @param newColumn 
	 */
	public void setColumn(ArrayList<Column> newColumn) {
	    this.column = newColumn;
	}
	
	/**
	 * Adds one attribute (if column had a multiple cardinality)
	 * @param columnToAdd in column
	 */
	public void addColumnToColumn(Column columnToAdd) {
		this.column.add(columnToAdd);
	}
	
	/**
	 * Removes an attribute (if column had a multiple cardinality)
	 * @param columnToRemove in column
	 */
	public void removeColumnToColumn(Column columnToRemove) {
		this.column.remove(columnToRemove);
	}
	
	/**
	 * Adds all the attribute (if column had a multiple cardinality)
	 * @param columnsToAdd in column
	 */
	public void addAllColumnToColumn(ArrayList<Column> columnsToAdd) {
		this.column.addAll(columnsToAdd);
	}
	
	/**
	 * Removes all the attribute (if column had a multiple cardinality)
	 * @param columnsToRemove in column
	 */
	public void removeAllColumnToColumn(ArrayList<Column> columnsToRemove) {
		this.column.removeAll(columnsToRemove);
	}

	/**
	 * Returns line.
	 * @return line 
	 */
	public ArrayList<Line> getLine() {
		return this.line;
	}
	
	/**
	 * Sets a value to attribute line. 
	 * @param newLine 
	 */
	public void setLine(ArrayList<Line> newLine) {
	    this.line = newLine;
	}
	
	/**
	 * Adds one attribute (if line had a multiple cardinality)
	 * @param lineToAdd in line
	 */
	public void addLineToLine(Line lineToAdd) {
		this.line.add(lineToAdd);
	}
	
	/**
	 * Removes an attribute (if line had a multiple cardinality)
	 * @param lineToRemove in line
	 */
	public void removeLineToLine(Line lineToRemove) {
		this.line.remove(lineToRemove);
	}
	
	/**
	 * Adds all the attribute (if line had a multiple cardinality)
	 * @param linesToAdd in line
	 */
	public void addAllLineToLine(ArrayList<Line> linesToAdd) {
		this.line.addAll(linesToAdd);
	}
	
	/**
	 * Removes all the attribute (if line had a multiple cardinality)
	 * @param linesToRemove in line
	 */
	public void removeAllLineToLine(ArrayList<Line> linesToRemove) {
		this.line.removeAll(linesToRemove);
	}

	/**
	 * Returns table.
	 * @return table 
	 */
	public Table getTable() {
		return this.table;
	}
	
	/**
	 * Sets a value to attribute table. 
	 * @param newTable 
	 */
	public void setTable(Table newTable) {
		this.table = newTable;
	}



}
