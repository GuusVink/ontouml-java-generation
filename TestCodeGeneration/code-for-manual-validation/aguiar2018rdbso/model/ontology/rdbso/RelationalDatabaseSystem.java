/*******************************************************************************
 * File generated from the ontology::aguiar2018rdbso::model::ontology::rdbso::RelationalDatabaseSystem uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:22:43 CEST
 *******************************************************************************/
package aguiar2018rdbso.model.ontology.rdbso;

import aguiar2018rdbso.model.ontology.dbso.DatabaseSystem;
import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of RelationalDatabaseSystem.
 * 
 * @author 
 */
public class RelationalDatabaseSystem extends DatabaseSystem {
	/**
	 * Description of the property loadedRDBMSCopy.
	 */
	public ArrayList<LoadedRDBMSCopy> loadedRDBMSCopy = new ArrayList<LoadedRDBMSCopy>();
	
	/**
	 * Description of the property rDBMSItem.
	 */
	public ArrayList<RDBMSItem> rDBMSItem = new ArrayList<RDBMSItem>();
	
	// Start of user code (user defined attributes for RelationalDatabaseSystem)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public RelationalDatabaseSystem() {
		// Start of user code constructor for RelationalDatabaseSystem)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for RelationalDatabaseSystem)
	
	// End of user code
	
	
	/**
	 * Returns loadedRDBMSCopy.
	 * @return loadedRDBMSCopy 
	 */
	public ArrayList<LoadedRDBMSCopy> getLoadedRDBMSCopy() {
		return this.loadedRDBMSCopy;
	}
	
	/**
	 * Sets a value to attribute loadedRDBMSCopy. 
	 * @param newLoadedRDBMSCopy 
	 */
	public void setLoadedRDBMSCopy(ArrayList<LoadedRDBMSCopy> newLoadedRDBMSCopy) {
	    this.loadedRDBMSCopy = newLoadedRDBMSCopy;
	}
	
	/**
	 * Adds one attribute (if loadedRDBMSCopy had a multiple cardinality)
	 * @param loadedRDBMSCopyToAdd in loadedRDBMSCopy
	 */
	public void addLoadedRDBMSCopyToLoadedRDBMSCopy(LoadedRDBMSCopy loadedRDBMSCopyToAdd) {
		this.loadedRDBMSCopy.add(loadedRDBMSCopyToAdd);
	}
	
	/**
	 * Removes an attribute (if loadedRDBMSCopy had a multiple cardinality)
	 * @param loadedRDBMSCopyToRemove in loadedRDBMSCopy
	 */
	public void removeLoadedRDBMSCopyToLoadedRDBMSCopy(LoadedRDBMSCopy loadedRDBMSCopyToRemove) {
		this.loadedRDBMSCopy.remove(loadedRDBMSCopyToRemove);
	}
	
	/**
	 * Adds all the attribute (if loadedRDBMSCopy had a multiple cardinality)
	 * @param loadedRDBMSCopysToAdd in loadedRDBMSCopy
	 */
	public void addAllLoadedRDBMSCopyToLoadedRDBMSCopy(ArrayList<LoadedRDBMSCopy> loadedRDBMSCopysToAdd) {
		this.loadedRDBMSCopy.addAll(loadedRDBMSCopysToAdd);
	}
	
	/**
	 * Removes all the attribute (if loadedRDBMSCopy had a multiple cardinality)
	 * @param loadedRDBMSCopysToRemove in loadedRDBMSCopy
	 */
	public void removeAllLoadedRDBMSCopyToLoadedRDBMSCopy(ArrayList<LoadedRDBMSCopy> loadedRDBMSCopysToRemove) {
		this.loadedRDBMSCopy.removeAll(loadedRDBMSCopysToRemove);
	}

	/**
	 * Returns rDBMSItem.
	 * @return rDBMSItem 
	 */
	public ArrayList<RDBMSItem> getRDBMSItem() {
		return this.rDBMSItem;
	}
	
	/**
	 * Sets a value to attribute rDBMSItem. 
	 * @param newRDBMSItem 
	 */
	public void setRDBMSItem(ArrayList<RDBMSItem> newRDBMSItem) {
	    this.rDBMSItem = newRDBMSItem;
	}
	
	/**
	 * Adds one attribute (if rDBMSItem had a multiple cardinality)
	 * @param rDBMSItemToAdd in rDBMSItem
	 */
	public void addRDBMSItemToRDBMSItem(RDBMSItem rDBMSItemToAdd) {
		this.rDBMSItem.add(rDBMSItemToAdd);
	}
	
	/**
	 * Removes an attribute (if rDBMSItem had a multiple cardinality)
	 * @param rDBMSItemToRemove in rDBMSItem
	 */
	public void removeRDBMSItemToRDBMSItem(RDBMSItem rDBMSItemToRemove) {
		this.rDBMSItem.remove(rDBMSItemToRemove);
	}
	
	/**
	 * Adds all the attribute (if rDBMSItem had a multiple cardinality)
	 * @param rDBMSItemsToAdd in rDBMSItem
	 */
	public void addAllRDBMSItemToRDBMSItem(ArrayList<RDBMSItem> rDBMSItemsToAdd) {
		this.rDBMSItem.addAll(rDBMSItemsToAdd);
	}
	
	/**
	 * Removes all the attribute (if rDBMSItem had a multiple cardinality)
	 * @param rDBMSItemsToRemove in rDBMSItem
	 */
	public void removeAllRDBMSItemToRDBMSItem(ArrayList<RDBMSItem> rDBMSItemsToRemove) {
		this.rDBMSItem.removeAll(rDBMSItemsToRemove);
	}



}
