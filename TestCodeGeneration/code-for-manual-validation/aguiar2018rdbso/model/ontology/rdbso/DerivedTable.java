/*******************************************************************************
 * File generated from the ontology::aguiar2018rdbso::model::ontology::rdbso::DerivedTable uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:22:43 CEST
 *******************************************************************************/
package aguiar2018rdbso.model.ontology.rdbso;

import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of DerivedTable.
 * 
 * @author 
 */
public class DerivedTable extends Table {
	/**
	 * Description of the property baseTable.
	 */
	public ArrayList<BaseTable> baseTable = new ArrayList<BaseTable>();
	
	// Start of user code (user defined attributes for DerivedTable)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public DerivedTable() {
		// Start of user code constructor for DerivedTable)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for DerivedTable)
	
	// End of user code
	
	
	/**
	 * Returns baseTable.
	 * @return baseTable 
	 */
	public ArrayList<BaseTable> getBaseTable() {
		return this.baseTable;
	}
	
	/**
	 * Sets a value to attribute baseTable. 
	 * @param newBaseTable 
	 */
	public void setBaseTable(ArrayList<BaseTable> newBaseTable) {
	    this.baseTable = newBaseTable;
	}
	
	/**
	 * Adds one attribute (if baseTable had a multiple cardinality)
	 * @param baseTableToAdd in baseTable
	 */
	public void addBaseTableToBaseTable(BaseTable baseTableToAdd) {
		this.baseTable.add(baseTableToAdd);
	}
	
	/**
	 * Removes an attribute (if baseTable had a multiple cardinality)
	 * @param baseTableToRemove in baseTable
	 */
	public void removeBaseTableToBaseTable(BaseTable baseTableToRemove) {
		this.baseTable.remove(baseTableToRemove);
	}
	
	/**
	 * Adds all the attribute (if baseTable had a multiple cardinality)
	 * @param baseTablesToAdd in baseTable
	 */
	public void addAllBaseTableToBaseTable(ArrayList<BaseTable> baseTablesToAdd) {
		this.baseTable.addAll(baseTablesToAdd);
	}
	
	/**
	 * Removes all the attribute (if baseTable had a multiple cardinality)
	 * @param baseTablesToRemove in baseTable
	 */
	public void removeAllBaseTableToBaseTable(ArrayList<BaseTable> baseTablesToRemove) {
		this.baseTable.removeAll(baseTablesToRemove);
	}



}
