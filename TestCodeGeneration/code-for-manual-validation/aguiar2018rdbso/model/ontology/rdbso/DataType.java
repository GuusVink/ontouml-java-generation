/*******************************************************************************
 * File generated from the ontology::aguiar2018rdbso::model::ontology::rdbso::DataType uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:22:42 CEST
 *******************************************************************************/
package aguiar2018rdbso.model.ontology.rdbso;

import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of DataType.
 * 
 * @author 
 */
public class DataType {
	/**
	 * Description of the property dataTypeConstraint.
	 */
	public DataTypeConstraint dataTypeConstraint = null;
	
	/**
	 * Description of the property externalDataType.
	 */
	public ArrayList<ExternalDataType> externalDataType = new ArrayList<ExternalDataType>();
	
	/**
	 * Description of the property columnTypeConstraint.
	 */
	public ArrayList<ColumnTypeConstraint> columnTypeConstraint = new ArrayList<ColumnTypeConstraint>();
	
	// Start of user code (user defined attributes for DataType)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public DataType() {
		// Start of user code constructor for DataType)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for DataType)
	
	// End of user code
	
	
	/**
	 * Returns dataTypeConstraint.
	 * @return dataTypeConstraint 
	 */
	public DataTypeConstraint getDataTypeConstraint() {
		return this.dataTypeConstraint;
	}
	
	/**
	 * Sets a value to attribute dataTypeConstraint. 
	 * @param newDataTypeConstraint 
	 */
	public void setDataTypeConstraint(DataTypeConstraint newDataTypeConstraint) {
		this.dataTypeConstraint = newDataTypeConstraint;
	}

	/**
	 * Returns externalDataType.
	 * @return externalDataType 
	 */
	public ArrayList<ExternalDataType> getExternalDataType() {
		return this.externalDataType;
	}
	
	/**
	 * Sets a value to attribute externalDataType. 
	 * @param newExternalDataType 
	 */
	public void setExternalDataType(ArrayList<ExternalDataType> newExternalDataType) {
	    this.externalDataType = newExternalDataType;
	}
	
	/**
	 * Adds one attribute (if externalDataType had a multiple cardinality)
	 * @param externalDataTypeToAdd in externalDataType
	 */
	public void addExternalDataTypeToExternalDataType(ExternalDataType externalDataTypeToAdd) {
		this.externalDataType.add(externalDataTypeToAdd);
	}
	
	/**
	 * Removes an attribute (if externalDataType had a multiple cardinality)
	 * @param externalDataTypeToRemove in externalDataType
	 */
	public void removeExternalDataTypeToExternalDataType(ExternalDataType externalDataTypeToRemove) {
		this.externalDataType.remove(externalDataTypeToRemove);
	}
	
	/**
	 * Adds all the attribute (if externalDataType had a multiple cardinality)
	 * @param externalDataTypesToAdd in externalDataType
	 */
	public void addAllExternalDataTypeToExternalDataType(ArrayList<ExternalDataType> externalDataTypesToAdd) {
		this.externalDataType.addAll(externalDataTypesToAdd);
	}
	
	/**
	 * Removes all the attribute (if externalDataType had a multiple cardinality)
	 * @param externalDataTypesToRemove in externalDataType
	 */
	public void removeAllExternalDataTypeToExternalDataType(ArrayList<ExternalDataType> externalDataTypesToRemove) {
		this.externalDataType.removeAll(externalDataTypesToRemove);
	}

	/**
	 * Returns columnTypeConstraint.
	 * @return columnTypeConstraint 
	 */
	public ArrayList<ColumnTypeConstraint> getColumnTypeConstraint() {
		return this.columnTypeConstraint;
	}
	
	/**
	 * Sets a value to attribute columnTypeConstraint. 
	 * @param newColumnTypeConstraint 
	 */
	public void setColumnTypeConstraint(ArrayList<ColumnTypeConstraint> newColumnTypeConstraint) {
	    this.columnTypeConstraint = newColumnTypeConstraint;
	}
	
	/**
	 * Adds one attribute (if columnTypeConstraint had a multiple cardinality)
	 * @param columnTypeConstraintToAdd in columnTypeConstraint
	 */
	public void addColumnTypeConstraintToColumnTypeConstraint(ColumnTypeConstraint columnTypeConstraintToAdd) {
		this.columnTypeConstraint.add(columnTypeConstraintToAdd);
	}
	
	/**
	 * Removes an attribute (if columnTypeConstraint had a multiple cardinality)
	 * @param columnTypeConstraintToRemove in columnTypeConstraint
	 */
	public void removeColumnTypeConstraintToColumnTypeConstraint(ColumnTypeConstraint columnTypeConstraintToRemove) {
		this.columnTypeConstraint.remove(columnTypeConstraintToRemove);
	}
	
	/**
	 * Adds all the attribute (if columnTypeConstraint had a multiple cardinality)
	 * @param columnTypeConstraintsToAdd in columnTypeConstraint
	 */
	public void addAllColumnTypeConstraintToColumnTypeConstraint(ArrayList<ColumnTypeConstraint> columnTypeConstraintsToAdd) {
		this.columnTypeConstraint.addAll(columnTypeConstraintsToAdd);
	}
	
	/**
	 * Removes all the attribute (if columnTypeConstraint had a multiple cardinality)
	 * @param columnTypeConstraintsToRemove in columnTypeConstraint
	 */
	public void removeAllColumnTypeConstraintToColumnTypeConstraint(ArrayList<ColumnTypeConstraint> columnTypeConstraintsToRemove) {
		this.columnTypeConstraint.removeAll(columnTypeConstraintsToRemove);
	}



}
