/*******************************************************************************
 * File generated from the Normative Acts::barcelos2013normativeacts::model::normative_acts::normative_acts::ChapterComposedByArticle uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:23:49 CEST
 *******************************************************************************/
package barcelos2013normativeacts.model.normative_acts.normative_acts;

import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of ChapterComposedByArticle.
 * 
 * @author 
 */
public class ChapterComposedByArticle extends Chapter {
	/**
	 * Description of the property members.
	 */
	public ArrayList<ArticleComponentOfChapter> members = new ArrayList<ArticleComponentOfChapter>();
	
	// Start of user code (user defined attributes for ChapterComposedByArticle)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public ChapterComposedByArticle() {
		// Start of user code constructor for ChapterComposedByArticle)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for ChapterComposedByArticle)
	
	// End of user code
	
	
	/**
	 * Returns members.
	 * @return members 
	 */
	public ArrayList<ArticleComponentOfChapter> getMembers() {
		return this.members;
	}
	
	/**
	 * Sets a value to attribute members. 
	 * @param newMembers 
	 */
	public void setMembers(ArrayList<ArticleComponentOfChapter> newMembers) {
	    this.members = newMembers;
	}
	
	/**
	 * Adds one attribute (if members had a multiple cardinality)
	 * @param articleComponentOfChapterToAdd in members
	 */
	public void addArticleComponentOfChapterToMembers(ArticleComponentOfChapter articleComponentOfChapterToAdd) {
		this.members.add(articleComponentOfChapterToAdd);
	}
	
	/**
	 * Removes an attribute (if members had a multiple cardinality)
	 * @param articleComponentOfChapterToRemove in members
	 */
	public void removeArticleComponentOfChapterToMembers(ArticleComponentOfChapter articleComponentOfChapterToRemove) {
		this.members.remove(articleComponentOfChapterToRemove);
	}
	
	/**
	 * Adds all the attribute (if members had a multiple cardinality)
	 * @param articleComponentOfChaptersToAdd in members
	 */
	public void addAllArticleComponentOfChapterToMembers(ArrayList<ArticleComponentOfChapter> articleComponentOfChaptersToAdd) {
		this.members.addAll(articleComponentOfChaptersToAdd);
	}
	
	/**
	 * Removes all the attribute (if members had a multiple cardinality)
	 * @param articleComponentOfChaptersToRemove in members
	 */
	public void removeAllArticleComponentOfChapterToMembers(ArrayList<ArticleComponentOfChapter> articleComponentOfChaptersToRemove) {
		this.members.removeAll(articleComponentOfChaptersToRemove);
	}



}
