/*******************************************************************************
 * File generated from the Normative Acts::barcelos2013normativeacts::model::normative_acts::normative_acts::ArticleComposedOfParagraph uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:23:49 CEST
 *******************************************************************************/
package barcelos2013normativeacts.model.normative_acts.normative_acts;

import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of ArticleComposedOfParagraph.
 * 
 * @author 
 */
public class ArticleComposedOfParagraph extends ComposedArticle {
	/**
	 * Description of the property paragraph.
	 */
	public ArrayList<Paragraph> paragraph = new ArrayList<Paragraph>();
	
	// Start of user code (user defined attributes for ArticleComposedOfParagraph)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public ArticleComposedOfParagraph() {
		// Start of user code constructor for ArticleComposedOfParagraph)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for ArticleComposedOfParagraph)
	
	// End of user code
	
	
	/**
	 * Returns paragraph.
	 * @return paragraph 
	 */
	public ArrayList<Paragraph> getParagraph() {
		return this.paragraph;
	}
	
	/**
	 * Sets a value to attribute paragraph. 
	 * @param newParagraph 
	 */
	public void setParagraph(ArrayList<Paragraph> newParagraph) {
	    this.paragraph = newParagraph;
	}
	
	/**
	 * Adds one attribute (if paragraph had a multiple cardinality)
	 * @param paragraphToAdd in paragraph
	 */
	public void addParagraphToParagraph(Paragraph paragraphToAdd) {
		this.paragraph.add(paragraphToAdd);
	}
	
	/**
	 * Removes an attribute (if paragraph had a multiple cardinality)
	 * @param paragraphToRemove in paragraph
	 */
	public void removeParagraphToParagraph(Paragraph paragraphToRemove) {
		this.paragraph.remove(paragraphToRemove);
	}
	
	/**
	 * Adds all the attribute (if paragraph had a multiple cardinality)
	 * @param paragraphsToAdd in paragraph
	 */
	public void addAllParagraphToParagraph(ArrayList<Paragraph> paragraphsToAdd) {
		this.paragraph.addAll(paragraphsToAdd);
	}
	
	/**
	 * Removes all the attribute (if paragraph had a multiple cardinality)
	 * @param paragraphsToRemove in paragraph
	 */
	public void removeAllParagraphToParagraph(ArrayList<Paragraph> paragraphsToRemove) {
		this.paragraph.removeAll(paragraphsToRemove);
	}



}
