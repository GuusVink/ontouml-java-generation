/*******************************************************************************
 * File generated from the Normative Acts::barcelos2013normativeacts::model::normative_acts::normative_acts::ComposedLetter uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:23:49 CEST
 *******************************************************************************/
package barcelos2013normativeacts.model.normative_acts.normative_acts;

import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of ComposedLetter.
 * 
 * @author 
 */
public class ComposedLetter extends Letter {
	/**
	 * Description of the property letterDiscriminator.
	 */
	public ArrayList<LetterDiscriminator> letterDiscriminator = new ArrayList<LetterDiscriminator>();
	
	// Start of user code (user defined attributes for ComposedLetter)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public ComposedLetter() {
		// Start of user code constructor for ComposedLetter)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for ComposedLetter)
	
	// End of user code
	
	
	/**
	 * Returns letterDiscriminator.
	 * @return letterDiscriminator 
	 */
	public ArrayList<LetterDiscriminator> getLetterDiscriminator() {
		return this.letterDiscriminator;
	}
	
	/**
	 * Sets a value to attribute letterDiscriminator. 
	 * @param newLetterDiscriminator 
	 */
	public void setLetterDiscriminator(ArrayList<LetterDiscriminator> newLetterDiscriminator) {
	    this.letterDiscriminator = newLetterDiscriminator;
	}
	
	/**
	 * Adds one attribute (if letterDiscriminator had a multiple cardinality)
	 * @param letterDiscriminatorToAdd in letterDiscriminator
	 */
	public void addLetterDiscriminatorToLetterDiscriminator(LetterDiscriminator letterDiscriminatorToAdd) {
		this.letterDiscriminator.add(letterDiscriminatorToAdd);
	}
	
	/**
	 * Removes an attribute (if letterDiscriminator had a multiple cardinality)
	 * @param letterDiscriminatorToRemove in letterDiscriminator
	 */
	public void removeLetterDiscriminatorToLetterDiscriminator(LetterDiscriminator letterDiscriminatorToRemove) {
		this.letterDiscriminator.remove(letterDiscriminatorToRemove);
	}
	
	/**
	 * Adds all the attribute (if letterDiscriminator had a multiple cardinality)
	 * @param letterDiscriminatorsToAdd in letterDiscriminator
	 */
	public void addAllLetterDiscriminatorToLetterDiscriminator(ArrayList<LetterDiscriminator> letterDiscriminatorsToAdd) {
		this.letterDiscriminator.addAll(letterDiscriminatorsToAdd);
	}
	
	/**
	 * Removes all the attribute (if letterDiscriminator had a multiple cardinality)
	 * @param letterDiscriminatorsToRemove in letterDiscriminator
	 */
	public void removeAllLetterDiscriminatorToLetterDiscriminator(ArrayList<LetterDiscriminator> letterDiscriminatorsToRemove) {
		this.letterDiscriminator.removeAll(letterDiscriminatorsToRemove);
	}



}
