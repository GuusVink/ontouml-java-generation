/*******************************************************************************
 * File generated from the Banking::bankmodel::model::banking::model::AccessingDevice uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 19 October 2024 20:23:29 CEST
 *******************************************************************************/
package bankmodel.model.banking.model;

import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of AccessingDevice.
 * 
 * @author 
 */
public class AccessingDevice {
	/**
	 * Description of the property device.
	 */
	public final Device device = null;
	
	/**
	 * Description of the property access.
	 */
	public ArrayList<Access> access = new ArrayList<Access>();
	
	// Start of user code (user defined attributes for AccessingDevice)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public AccessingDevice() {
		// Start of user code constructor for AccessingDevice)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for AccessingDevice)
	
	// End of user code
	
	
	/**
	 * Returns device.
	 * @return device 
	 */
	public Device getDevice() {
		return this.device;
	}

	/**
	 * Returns access.
	 * @return access 
	 */
	public ArrayList<Access> getAccess() {
		return this.access;
	}
	
	/**
	 * Sets a value to attribute access. 
	 * @param newAccess 
	 */
	public void setAccess(ArrayList<Access> newAccess) {
	    this.access = newAccess;
	}
	
	/**
	 * Adds one attribute (if access had a multiple cardinality)
	 * @param accessToAdd in access
	 */
	public void addAccessToAccess(Access accessToAdd) {
		this.access.add(accessToAdd);
	}
	
	/**
	 * Removes an attribute (if access had a multiple cardinality)
	 * @param accessToRemove in access
	 */
	public void removeAccessToAccess(Access accessToRemove) {
		this.access.remove(accessToRemove);
	}
	
	/**
	 * Adds all the attribute (if access had a multiple cardinality)
	 * @param accesssToAdd in access
	 */
	public void addAllAccessToAccess(ArrayList<Access> accesssToAdd) {
		this.access.addAll(accesssToAdd);
	}
	
	/**
	 * Removes all the attribute (if access had a multiple cardinality)
	 * @param accesssToRemove in access
	 */
	public void removeAllAccessToAccess(ArrayList<Access> accesssToRemove) {
		this.access.removeAll(accesssToRemove);
	}



}
