/*******************************************************************************
 * File generated from the Project Management Ontology::projectmanagementontology::model::project_management_ontology::project_management_ontology::Composed uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: 31 October 2024 16:51:36 CET
 *******************************************************************************/
package projectmanagementontology.model.project_management_ontology.project_management_ontology;

import java.util.ArrayList;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of Composed.
 * 
 * @author 
 */
public class Composed extends Activity {
	/**
	 * Description of the property atomic.
	 */
	public ArrayList<Atomic> atomic = new ArrayList<Atomic>();
	
	// Start of user code (user defined attributes for Composed)
	
	// End of user code
	
	/**
	 * The constructor.
	 */
	public Composed() {
		// Start of user code constructor for Composed)
		super();
		// End of user code
	}
	
	// Start of user code (user defined methods for Composed)
	
	// End of user code
	
	
	/**
	 * Returns atomic.
	 * @return atomic 
	 */
	public ArrayList<Atomic> getAtomic() {
		return this.atomic;
	}
	
	/**
	 * Sets a value to attribute atomic. 
	 * @param newAtomic 
	 */
	public void setAtomic(ArrayList<Atomic> newAtomic) {
	    this.atomic = newAtomic;
	}
	
	/**
	 * Adds one attribute (if atomic had a multiple cardinality)
	 * @param atomicToAdd in atomic
	 */
	public void addAtomicToAtomic(Atomic atomicToAdd) {
		this.atomic.add(atomicToAdd);
	}
	
	/**
	 * Removes an attribute (if atomic had a multiple cardinality)
	 * @param atomicToRemove in atomic
	 */
	public void removeAtomicToAtomic(Atomic atomicToRemove) {
		this.atomic.remove(atomicToRemove);
	}
	
	/**
	 * Adds all the attribute (if atomic had a multiple cardinality)
	 * @param atomicsToAdd in atomic
	 */
	public void addAllAtomicToAtomic(ArrayList<Atomic> atomicsToAdd) {
		this.atomic.addAll(atomicsToAdd);
	}
	
	/**
	 * Removes all the attribute (if atomic had a multiple cardinality)
	 * @param atomicsToRemove in atomic
	 */
	public void removeAllAtomicToAtomic(ArrayList<Atomic> atomicsToRemove) {
		this.atomic.removeAll(atomicsToRemove);
	}



}
